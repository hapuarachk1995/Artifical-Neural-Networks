# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17hSfLhSzNzyTloocZeOudGJhhVJq9Bx1

# Installation and setup
"""

import tensorflow as tf

print(tf.__version__)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# Data Preprocessing"""

from sklearn import datasets, metrics

cancer = datasets.load_breast_cancer()

print(cancer.DESCR)

x = pd.DataFrame(data = cancer.data, columns=cancer.feature_names)

y = cancer.target
print(y)

cancer.target_names

x.shape, y.shape

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state= 0)

x_train.shape, x_test.shape

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

x_train

x_train.shape, x_test.shape

x_train = x_train.reshape(455, 30, 1)
x_test = x_test.reshape(114, 30, 1)

x_train.shape, x_test.shape



"""# Building the Model"""

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu', input_shape = (30, 1)))

model.add(tf.keras.layers.BatchNormalization())

model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv1D(filters=64, kernel_size=2, activation='relu'))

model.add(tf.keras.layers.BatchNormalization())

model.add(tf.keras.layers.Dropout(0.4))

model.add(tf.keras.layers.Flatten())

model.add(tf.keras.layers.Dense(units=64, activation='relu'))

model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

model.summary()

opt = tf.keras.optimizers.Adam(learning_rate=0.000005)

model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])

"""# Training the Model"""

history = model.fit(x_train, y_train, epochs=30, validation_data=(x_test, y_test))

"""# Model Prediction"""

actual = numpy.random.binomial(1,.9,size = 1000)
predicted = numpy.random.binomial(1,.9,size = 1000)

confusion_matrix = metrics.confusion_matrix(actual, predicted)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])

cm_display.plot()
plt.show()

def learning_curve(history, epoch):
  epoch_range = range(1, epoch+1)
  plt.plot(epoch_range, history.history['accuracy'])
  plt.plot(epoch_range, history.history['val_accuracy'])
  plt.title('Model Accuracy')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'val'], loc='upper left')
  plt.show()

  plt.plot(epoch_range, history.history['loss'])
  plt.plot(epoch_range, history.history['val_loss'])
  plt.title('Model loss')
  plt.ylabel('loss')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'val'], loc='upper left')
  plt.show()

"""
# Learning Curve"""

learning_curve(history, 30)